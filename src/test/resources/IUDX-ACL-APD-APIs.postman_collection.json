{
  "info": {
    "_postman_id": "97093bc3-1a43-4ab5-9c1b-69b746e5503d",
    "name": "IUDX-ACL-APD",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "policy",
      "item": [
        {
          "name": "200 Verify Policy: Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:apd:Allow\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"id\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\n    \"name\": {\n    \"firstName\":\"Vasanth\",\n    \"lastName\":\"Rajaraman\"\n    },\n    \"email\": \"vasanth.rajaraman@datakaveri.org\"\n  },\n  \"owner\": {\n    \"id\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\n    \"name\": {\n    \"firstName\":\"B\",\n    \"lastName\":\"Robert A B C D\"\n    },\n    \"email\": \"bryanrobert@iisc.ac.in\"\n  },\n   \"item\": {\n     \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n     \"itemType\": \"resource_group\"\n   }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Verify Policy: No Policy Exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:apd:Deny\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"No policy exist for given Resource Group\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource_group\"\n   }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Verify Policy: Bad Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:backend\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Bad Request\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource\"\n   }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Create Policy : Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"vasanth.rajaraman@datakaveri.org\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Create Policy : Bad Request Item Not Present",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Item id given is not present\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"d67a19d5-0a26-5d7c-b0e7-58e7f3b222e3\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Create Policy : Bad Request Expiry Time in Past",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Expiry time must be a future date/time\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"d67a19d5-0a26-5d7c-b0e7-58e7f3b222e3\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2021-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Create Policy : Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"test_consumers@xyz.com\",\n      \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    },\n        {\n      \"userEmail\": \"dummy_consumers@xyz.com\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-25T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\",\n          \"file\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Create Policy : Forbidden OwnerShip Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this resource.\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateTokenForbidden}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9a\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "409 Create Policy : Conflict Duplicate Policy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 409 (Conflict)\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"vasanth.rajaraman@datakaveri.org\",\n      \"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9a\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Delete Policy: Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Delete Policy: Bad Request [Policy not active, expired, or withdrawn]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy is not ACTIVE\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Delete Policy : Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Delete Policy:  Forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this policy.\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateTokenForbidden}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"ecefcebc-2949-4b01-b3d8-1f488dc4ca45\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Delete Policy: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as it doesn't exist\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"394608f9-b370-4606-a947-1cf300dab04c\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Get Policy : Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Get Policy: Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Get Policy: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Policy not found\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}"
              },
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "access request",
      "item": [
        {
          "name": "200 Put Access Request: Success [Approve]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"requestId\": \"b6123b79-8cd1-4385-bb91-f4e2bb77ef99\",\n  \"status\": \"granted\",\n  \"expiryAt\": \"2024-03-05T20:00:19\",\n  \"constraints\": {\n    \"access\": [\n      \"api\",\n      \"sub\",\n      \"file\"\n    ]\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Put Access Request: Success [Reject]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"80e5f127-2446-406a-8ff2-cfe7be4ea422\",\n    \"status\": \"rejected\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Put Access Request: Bad Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"b6123b79-8cd1-4385-bb91-f4e2bb77ef99\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2020-03-05T20:00:19\",\n    \"constraints\": {\n        \"access\": [\n            \"api\",\n            \"sub\",\n            \"file\"\n        ]\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Put Access Request: Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"d9e85db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Put Access Request: Forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this resource.\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateTokenForbidden}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"b6123b79-8cd1-4385-bb91-f4e2bb77ef99\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\n        \"access\": [\n            \"api\",\n            \"sub\",\n            \"file\"\n        ]\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Put Access Request: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Request could not be updated, as it is not found\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"d9e86db7-c4b7-4471-a95d-75b4e39f4b51\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "409 Put Access Request: Conflict [Policy already created]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 409 (Conflict)\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"requestId\": \"da5781d1-5479-4a93-a658-ee793362de1f\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Get Access Request: Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Get Access Request: Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Get Access Request: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Access request not found\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{providerDelegateToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Delete Access Request: Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"da5781d1-5479-4a93-a658-ee793362de1f\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Delete Access Request: Bad Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"da5781d1-5479-4a93-a658-ee793362de1f\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Delete Access Request: Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 401 (Not Authorized)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d13\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Delete Access Request: Forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this resource.\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "{{consumerTokenForbidden}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"b1a16834-f238-4458-b468-887c2955e3cb\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Delete Access Request: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Request could not be withdrawn, as it is not found\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d11\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "200 Create Access Request: Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 200 (OK)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Success\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n\"itemType\": \"RESOURCE_GROUP\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "400 Create Access Request: Bad Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "401 Create Access Request: Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
                  "    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{providerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9b\",\n\"itemType\": \"RESOURCE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "403 Create Access Request: Forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerTokenForbidden}}",
                "type": "text"
              },
              {
                "key": "",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n\"itemType\": \"RESOURCE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "404 Create Access Request: Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f98\",\n\"itemType\": \"RESOURCE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "409 Create Access Request: Conflict",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the response code",
                  "pm.test(\"response is 409 (Conflict)\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "// Test the response header",
                  "pm.test(\"Check response header\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
                  "});",
                  "",
                  "// Test the response",
                  "pm.test(\"Check response body\", function () {    ",
                  "    const body = pm.response.json();",
                  "    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
                  "    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
                  "    }",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{consumerToken}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{consumerDelegateToken}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n\"itemType\": \"RESOURCE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}{{basePath}}/policies/requests",
              "host": [
                "{{baseUrl}}{{basePath}}"
              ],
              "path": [
                "policies",
                "requests"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
