{
	"info": {
		"_postman_id": "bcd5ff9f-c0b5-4e64-9b50-ef0f6985563e",
		"name": "IUDX-ACL-APD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "policy",
			"item": [
				{
					"name": "200 Verify Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Allow\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"test_consumers@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"bbeacb12-5e54-339d-92e0-d8e063b551a8\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n     \"itemType\": \"RESOURCE_GROUP\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Verify Policy: No Policy Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Deny\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"No policy exist for given Resource Group\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"RESOURCE_GROUP\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Verify Policy: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:backend\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"RESOURCE\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Create Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"test_consumers@xyz.com\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    },\n        {\n      \"userEmail\": \"dummy_consumers@xyz.com\",\n      \"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9a\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"2024-08-25T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\",\n          \"file\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"test_consumers@xyz.com\",\n      \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    },\n        {\n      \"userEmail\": \"dummy_consumers@xyz.com\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-25T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\",\n          \"file\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 Create Policy : Conflict Duplicate Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"test_consumers@xyz.com\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    },\n        {\n      \"userEmail\": \"dummy_consumers@xyz.com\",\n      \"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9a\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"2024-08-25T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\",\n          \"file\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Create Policy : Forbidden OwnerShip Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Ownership Error.\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a9\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Create Policy : Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"d67a19d5-0a26-5d7c-b0e7-58e7f3b222e2\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"014ef385-31b8-4d9b-a6a9-041e75dc4959\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Delete Policy: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy is not ACTIVE\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Delete Policy:  Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy doesn't belong to the user\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a9\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:general\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"394608f9-b370-4606-a947-1cf300dab04c\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Get Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get Policy: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Get Policy: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Access Denied\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be fetched, user doesn't own the policy\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notification",
			"item": [
				{
					"name": "200 Put Notification: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"0450be67-db7b-4eb1-9e70-13f5284fdc75\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Put Notification: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e85db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Put Notification: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e85db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Put Notification: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be withdrawn, as it is doesn't belong to the user\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e85db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Put Notification: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:general\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be granted or rejected, as it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e86db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 Put Notification: Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"0450be67-db7b-4eb1-9e70-13f5284fdc75\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Get Notification: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get Notification: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Get Notification: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Access Denied\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy doesn't belong to the user\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Notification: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Notification: Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"0450be67-db7b-4eb1-9e70-13f5284fdc75\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Delete Notification: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d12\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Notification: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Missing auth details\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Missing auth details\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d13\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Delete Notification: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be withdrawn, as it is doesn't belong to the user\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d12\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Notification: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:general\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be withdrawn, as it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d11\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Create Notification: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a1\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Notification: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9b\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Create Notification: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9b\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 Create Notification: Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a1\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8443/ngsi-ld/v1/policies/requests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"ngsi-ld",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}