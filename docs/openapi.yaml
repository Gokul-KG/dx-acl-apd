openapi: 3.0.0
info:
  version: 1.0.0
  title: Data-Exchange-ACL-APD
  description: API specification for ACL APD. These APIs are used by users manage policy. These APIs requires valid token for authentication.
  contact:
    name: For support contact IUDX Team at
    email: support@iudx.org.in
  license:
    name: MIT

paths:
  /ngsi-ld/v1/policies:
    get:
      tags:
        - Policies APIs
      summary: Get Policies
      description: |
        Get policies related to a particular user. The response depends on the roles the user has
        - `provider` : returns all policies created by the provider/delegate of the provider.
        - `delegate` : returns all policies set by the delegate for the provider or set for the consumer the delegate is acting on behalf off.
        - `consumer` : returns the policies set for the consumer
      operationId: get-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      responses:
        '200':
          description: |-
            Successfully lists the policies
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getPolicySuccessResponseWithResourceGroup'
                  - $ref: '#/components/schemas/getPolicySuccessResponseWithResourceType'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: '- Not Found - Policy not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policyNotFound'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]


    delete:
      tags:
        - Policies APIs
      summary: Delete Policies
      description: |-
        User policies can be deleted.
        The request would contain `id`, i.e. the ID of the user policy or APD policy that the user wants to delete. The user can use the List Policy API to get the policy ID.
        ## Delegate
         - A delegate may use the API to view policies on behalf of their provider. The user info of the delegator must be present in the token issued by the Data Exchange AAA
      operationId: delete-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      requestBody:
        description: Request body is a JsonObject containing ID whose value is the policy ID.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  minLength: 36
                  maxLength: 36
              required:
                - id
            examples:
              Delete Policies:
                value:
                  id: 231f6eca-6276-4993-bfeb-53cbbbba6f06
      responses:
        '200':
          description: Successfully deleted the User Policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicy'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            Bad Request
            - Error or exceptions
            - id is not a valid a policyId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicyErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: |-
            Not Found
              - policy id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicyNotFoundErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            Unauthorized
              - `token` invalid/expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - User does not own the policy or is not a delegate to the owner of the policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicyInvalidUserResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]


    post:
      tags:
        - Policies APIs
      summary: Create Policies
      description: >-
        Allows users to create policies to allow a particular user to get token
        for a resource.

        `providers` can create policy for any resource that they own.

        `delegates` can create policy on behalf of a provider who owns the
        resource.


        ## Policies created by provider


        ### User Policies

        - Valid item types - `RESOURCE`, `RESOURCE_GROUP`

        - A `provider` can set **user policies** for a `consumer` for the
        resources owned by the `provider`.



        ## Policies created by delegate

        - A delegate may use the API to view policies on behalf of their
        provider. This is done by passing the userInfo of the delegator must be
        present in the token issued by the AAA.


        ### User Policies

        - Valid item types - `RESOURCE`, `RESOURCE_GROUP`

        - A `delegate` can set **user policies** for other `delegate` or
        `consumer` for the resources owned by the `provider`
      operationId: post-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      requestBody:
        description: >
          Request body will be an JsonObject containing JsonArray of requests.
          The requests can be either for user policies or APD policies.

          ### User Policy Request :

          - `userEmail` : emailId of the user for whom policy is to be set.

          - `itemId` : UUID value of the item for which policy is to be set

          - `itemType` : Enum value of the item type

          - `expiryTime` : ISO8601 compatible time in
          UTC(yyyy-MM-dd'T'HH:mm:ss). optional field, if not sent default expiry
          is set for the policy

          - `constraints` : JsonObject of the constraints that the resource
          server can recognize.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    anyOf:
                      - type: object
                        additionalProperties: false
                        properties:
                          userEmail:
                            type: string
                            pattern: >-
                              ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
                            minLength: 1
                            maxLength: 36
                          itemId:
                            type: string
                            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                            minLength: 1
                            maxLength: 512
                          itemType:
                            enum:
                              - RESOURCE
                              - RESOURCE_GROUP
                            minLength: 1
                          expiryTime:
                            type: string
                            pattern: >-
                              ^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$
                            minLength: 1
                          constraints:
                            type: object
                        required:
                          - userEmail
                          - itemId
                          - itemType
                          - constraints
              required:
                - request
              x-examples:
                example-1:
                  request:
                    - userEmail: pqr@abc.com
                      itemId: example-resource-group
                      itemType: RESOURCE_GROUP
                      expiryTime: '2023-08-30T21:10:06'
                      constraints: {}
                    - userEmail: test@demo.com
                      itemId: example-resource-group
                      itemType: RESOURCE_GROUP
                      expiryTime: '2023-08-30T21:10:06'
                      constraints: {}
            examples:
              Single request for resource group user policy:
                value:
                  request:
                    - userEmail: abc@xyz.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE_GROUP
                      expiryTime: '2022-08-04T20:00:19'
                      constraints:
                        access:
                          - sub
              Single request for resource user policy:
                value:
                  request:
                    - userEmail: abc@xyz.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE
                      expiryTime: '2022-10-10T04:00:19'
                      constraints:
                        access:
                          - api
                          - sub
              Multiple user policy requests:
                value:
                  request:
                    - userEmail: xyz@abx.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE_GROUP
                      expiryTime: '2022-08-04T20:00:19'
                      constraints: {}
                    - userEmail: aaa@yun.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE
                      expiryTime: '2022-10-10T04:00:19'
                      constraints:
                        access:
                          - api
                          - sub
          application/xml:
            schema:
              type: object
      responses:
        '200':
          description: >-
            The policies have been created successfully.Must return the details
            of the policy created like policy Id,ItemId etc.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicySuccessResponse'
        '400':
          description: |-
            - Missing or malformed data
            - Invalid expiry - dateTime in the past or invalid format
            - Invalid user - UserId is not present in db
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicyBadRequest'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: >-
            - If the user trying to set a policy does not have an  `provider` or
            `delegate` role

            - If the user is neither the owner of the resource item/group or a
            delegate to the owner of the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicyForbidden'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-

            - If a valid policy already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conflictResponse'
      security:
        - authorization: []

  /verify:
    post:
      tags:
        - Verify API
      summary: Verify Policy
      description: |
        Verify the policy for a given item and owner. This endpoint checks if a policy exists for the specified item and owner in the APD server. It returns the policy constraints if a policy is found.
      operationId: get-auth-v1-verify
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      requestBody:
        description: >-
          The request body is a JSON object that contains information about the
          user, owner, and item.The user's ID, name, and email, as well as the
          owner's ID, name, and email, are provided.Additionally, information
          about the item, including its ID and type, is included.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBodyForVerify'
            examples:
              request-body:
                value:
                  user:
                    id: b58da193-23d9-43eb-b98a-a103d4b6103c
                    name:
                      firstName: demo
                      lastName: name
                    email: test_user_1@example.com
                  owner:
                    id: b2c27f3f-2524-4a84-816e-91f9ab23f837
                    name:
                      firstName: test
                      lastName: provider
                    email: test@provider.com
                  item:
                    itemId: b58da193-23d9-43eb-b98a-a103d4b6103c
                    itemType: RESOURCE_GROUP
      responses:
        '200':
          description: Policy verification successful
          content:
            application/json:
              example:
                type: urn:apd:Allow
                constraints:
                  rule: read
                  duration: 3600
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                type: urn:dx:acl:badRequest
                title: Bad Request
                detail: Bad Request
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                type: urn:apd:Deny
                title: Policy does not exist
                detail: Invalid request format/Incorrect request
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                type: urn:dx:acl:internalServerError
                title : Internal Server Error
                detail: DB error.
      security:
        - authorization: [ ]

  /ngsi-ld/v1/policies/requests:
    get:
      tags:
        - Access Request APIs
      summary: List Access Requests
      description: |-
        Lists all the access requests of the user calling the API. The response depends on the roles the user has

        - `provider` : The requests that are present for the items owned by a provider are returned.
        - `consumer` : The requests which are created by the consumer are returned.

        ## Delegate
        A delegate may use the API to view policies on behalf of their provider. The user info of the delegator must be present in the token issued by the Data Exchange AAA
      operationId: get-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      responses:
        '200':
          description: |-
            OK
            - Successfully fetched all the requests of a consumer or of a provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              examples:
                ListResults:
                  value:
                    type: 'urn:dx:acl:success'
                    title: Success
                    results:
                      - requestId: ea48d233-5d3b-4bdb-9545-691680c99cee
                        itemId: pune-env-flood-FWR056"
                        itemType: RESOURCE
                        status: pending
                        expiryAt: '2024-03-05T20:00:19'
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        consumer:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
                        provider:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: |-
            Not Found
            - access requests were not previously created by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationNotFoundResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]


    post:
      tags:
        - Access Request APIs
      summary: Create Access Request
      description: |-
        Access requests are made by consumers to request a provider to grant access to the provider's resources. Providers or their associated delegates may choose to approve or reject the request. On approval, a policy is written for the consumer for said resource. On rejection, no policy is written.

        Users with the `consumer` role can request access for a resource/resource group
      operationId: post-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      requestBody:
        description: |
          - `itemId` : The catalogue ID of the item for which the request is to be created.(UUID)
          - `itemType` : The type of the resource being requested for, it could be either RESOURCE or RESOURCE_GROUP
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  minLength: 36
                  maxLength: 36
                itemType:
                  enum:
                    - RESOURCE_GROUP
                    - RESOURCE
                  minLength: 1
              required:
                - itemId
                - itemType
              x-examples:
                example-1:
                  itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                  itemType: RESOURCE
            examples:
              Create:
                value:
                  itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                  itemType: RESOURCE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationSuccessResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            Bad Request
            - Schema validation, missing or incorrect fields & values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalBadRequest'
              examples:
                Example:
                  value:
                    type: urn:dx:acl:badRequest
                    title: Bad Request
                    detail: Invalid or missing fields
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            Unauthorized
            - `token` invalid/expired
            - A user with non-consumer role trying to create a request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - Resource being requested for is forbidden to access
            - Consumer trying to access a resource not belonging to the same server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationForbiddenResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json

        '404':
          description: |-
            Not Found
            - Resource not found in Data Exchange Catalogue Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationResourceNotFoundResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-
            Conflict
            - The policy or request for the given resource was previously created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationConflictResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json

      security:
        - authorization: [ ]


    put:
      tags:
        - Access Request APIs
      summary: Update Access Request
      description: |
        Providers or delegates can choose to approve or reject **pending** access requests associated with their resources.

        If the request is approved
        - The request is modified to the `approved` state
        - A policy is created corresponding to the requested resource with the applicable expiry time and constraints.

        If the request is rejected
        - The request is modified to the `rejected` state

        ## Delegate
        A delegate may use the API to view policies on behalf of their provider. This is done by passing the userInfo of the delegator which must be present in the token issued by the AAA.
      operationId: put-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 4000
            example: Bearer <JWT>
      requestBody:
        description: |-
          - `requestId` :  ID of the request. Can get this `id` by using the list policy API.
          - `status` : The `provider` or `Auth delegate` can update the status to `granted` or `rejected`.
          - `expiryAt` : expiration time stamp of the policy that will be created (Only present for the granted requests).
          - `constraints` :  constraints for the policy if request is granted.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  minLength: 36
                  maxLength: 36
                status:
                  enum:
                    - granted
                    - rejected
                  minLength: 1
                expiryAt:
                  type: string
                constraints:
                  type: object
              required:
                - requestId
                - status
              x-examples:
                example-1:
                  requestId: bca11712-f381-46a5-afa3-a29b00568ace
                  status: granted
                  expiryAt: '2024-03-05T20:00:19'
                  constraints:
                    access:
                      - api
                      - sub
                      - file
            examples:
              Update Approved access request:
                value:
                  requestId: bca11712-f381-46a5-afa3-a29b00568ace
                  status: granted
                  expiryAt: '2024-03-05T20:00:19'
                  constraints:
                    access:
                      - api
                      - sub
                      - file
              Update Rejected access request:
                value:
                   requestId: bca11712-f381-46a5-afa3-a29b00568ace
                   status: rejected
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessRequest'
              examples:
                Update:
                  value:
                    type: 'urn:dx:acl:success'
                    title: Success
                    detail: 'Request updated successfully'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: 'Bad Request- Schema validation, missing or incorrect fields & values'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationBadRequest'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: '- Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationNotFound'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - User does not own the policy or is not a delegate to the owner of the policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationForbiddenResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-
            Conflict
            - Policy for the approved request was created previously
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationConflict'
      security:
        - authorization: []


    delete:
      tags:
        - Access Request APIs
      summary: Withdraw Access Request
      description: |-
        A consumer may choose to withdraw access requests they have created, **as long as they are still in the pending state**. A withdrawn request  cannot be approved or rejected by the concerned provider.

        Only users with `consumer` role can call this API.
      operationId: delete-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued token
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          - `id` : the UUID of the request that is to be deleted.

          Consumers can get the `id` of the request they want to delete using the list access request API.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  minLength: 36
                  maxLength: 36
              required:
                - id
            examples:
              Delete Notification:
                value:
                  id: 6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3

      responses:
        '200':
          description: Successfully deleted the access request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotification'
        '400':
          description: |-
            Bad Request
              - Errors or exceptions
              - The ID is no longer in the `PENDING` status or has already been withdrawn earlier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotificationBadRequest'
        '404':
          description: |-
            Not Found
              - The ID for which the request is being withdrawn is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotificationNotFound'
        '403':
          description: |-
            Forbidden
            - User does not own the policy or is not a delegate to the owner of the policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotificationForbiddenResponse'
        '401':
          description: |-
            Unauthorized
              - Invalid token
              - User with non-consumer role trying to call the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

      security:
        - authorization: [ ]


components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
  schemas:
    getNotificationNotFoundResponse:
      title: Update notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Access request not found
    createNotificationForbiddenResponse:
      title: Create notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Access Denied: You do not have ownership rights for this resource'
    updateNotificationForbiddenResponse:
      title: Update notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: Request could not be updated, as it  doesn't belong to the user

    updateNotificationNotFound:
      title: Update notification not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be updated, as it is not found

    updateNotificationBadRequest:
      title: Update notification bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Request could not be updated, as it is not in pending status

    updateNotificationConflict:
      title: Update notification conflict
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:conflict
        title: Conflict
        detail: Request could not be approved, as policy is already created

    UpdateAccessRequest:
      title: Delete notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request updated successfully
    getNotificationForbiddenResponse:
      title: get notification forbidden response
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Request could not be fetched, as it doesn't belong to the user
    createNotificationSuccessResponse:
      title: Create notification success
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request inserted successfully!

    createNotificationResourceNotFoundResponse:
      title: Create notification resource not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be created, as resource is not found

    createNotificationConflictResponse:
      title: Create notification conflict response
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:conflict
        title: Conflict
        detail: Request could not be created, as policy or request for the given resource is already present


    getPolicySuccessResponseWithResourceType:
      title: get policy for type resource
      required:
        - type
        - title
        - results
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minLength: 1
          items:
            type: object
            properties:
              policyId:
                type: string
              itemId:
                type: string
              itemType:
                type: string
                default: "RESOURCE"
              consumer:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              provider:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              status:
                type: string
                enum: [ "ACTIVE","DELETED" ]
              expiryAt:
                type: string
              constraints:
                type: object
                properties:
                  access:
                    type: array
      example: { "type": "urn:dx:acl:success",
                 "title": "Success",
                 "results": [ { "policyId": "aaaaaaaa-1234-1234-1234-1234aaaa1234",
                                "itemId": "cccccccc-4576-3455-5645-3565aaaa4255",
                                "itemType": "RESOURCE",
                                "expiryAt": "2024-03-05T20:00:19",
                                "constraints": { access: [ sub ] },
                                "status": "ACTIVE",
                                "consumer": { "email": "dummyConsumer@example.com",
                                              "name": { "firstName": "Some",
                                                        "lastName": "Consumer" },
                                              "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                                "provider": { "email": "someProvider@example.com",
                                              "name": { "firstName": "Some",
                                                        "lastName": "Provider" },
                                              "id": "abcdcd4-4576-3455-5645-3565aaaa4255" } } ] }

    getPolicySuccessResponseWithResourceGroup:
      title: get policy with for type resource-group
      required:
        - type
        - title
        - results
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minLength: 1
          items:
            type: object
            properties:
              policyId:
                type: string
              itemId:
                type: string
              itemType:
                type: string
                default: "RESOURCE_GROUP"
              consumer:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              provider:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              status:
                type: string
                enum: [ "ACTIVE","DELETED" ]
              expiryAt:
                type: string
              constraints:
                type: object
                properties:
                  access:
                    type: array
      example: { "type": "urn:dx:acl:success",
                 "title": "Success",
                 "results": [ { "policyId": "aaaaaaaa-6473-3546-5436-8758aaaa5897",
                                "itemId": "cccccccc-6754-8958-2456-3452aaaa5436",
                                "itemType": "RESOURCE_GROUP",
                                "expiryAt": "2024-09-05T20:00:19",
                                "constraints": { access: [ sub ] },
                                "status": "ACTIVE",
                                "consumer": { "email": "dummyConsumerAbcd@example.com",
                                              "name": { "firstName": "Dummy",
                                                        "lastName": "Consumer" },
                                              "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                                "provider": { "email": "dummyProvider@example.com",
                                              "name": { "firstName": "Dummy",
                                                        "lastName": "Provider" },
                                              "id": "bbbbbbbb-8958-2445-2354-7587aaaa6776" } },
                   { "policyId": "aaaaaaaa-9870-7676-7456-2454aaaa1111",
                     "itemId": "cccccccc-2452-2455-5656-1111aaaa7878",
                     "itemType": "RESOURCE_GROUP",
                     "expiryAt": "2024-08-05T20:00:29",
                     "constraints": { access: [ sub ] },
                     "status": "ACTIVE",
                     "consumer": { "email": "dummyConsumer@example.com",
                                   "name": { "firstName": "Dummy",
                                             "lastName": "Consumer" },
                                   "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                     "provider": { "email": "dummyProviderTwo@example.com",
                                   "name": { "firstName": "Some",
                                             "lastName": "ProviderTwo" },
                                   "id": "bbbbbbbb-2652-1167-1766-4587aaaa2454" } } ] }

    deleteNotificationForbiddenResponse:
      title: Delete notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: Request could not be withdrawn, as it doesn't belong to the user

    deleteNotificationNotFound:
      title: Delete notification not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be withdrawn, as it is not found

    deleteNotificationBadRequest:
      title: Delete notification bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Request could not be withdrawn, as it is not in pending status
    deleteNotification:
      title: Delete Notification
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request deleted successfully

    deletePolicy:
      title: deletePolicy
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Policy deleted successfully
    deletePolicyInvalidUserResponse:
      title: deletePolicyInvalidUserResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Policy could not be deleted, as user doesn't own the policy
    getPolicyInvalidUserResponse:
      title: getPolicyInvalidUserResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Policy could not be fetched, user doesn't own the policy

    updateNotificationInvalidUserResponse:
      title: updateNotificationInvalidUserResponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Notification could not be updated, notification doesn't belong to the user
    policyNotFound:
      title: policyNotFound
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Policy Not Found
    deletePolicyErrorResponse:
      title: deletePolicyErrorResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Policy could not be deleted, as it is not in active state or is expired
    deletePolicyNotFoundErrorResponse:
      title: deletePolicyNotFoundErrorResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Policy could not be deleted, as it doesn't exist
    Unauthorized:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:invalidAuthorizationToken
        title: Not Authorized
        detail: Not Authorized
    createPolicyBadRequest:
      title: Create policy bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Item id given is not present or Expiry time must be a future date/time
    createPolicyForbidden:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: Ownership Error.
    createPolicySuccessResponse:
      title: complete
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: 'urn:dx:acl:success'
        title: Success
        detail: Policy created successfully

    conflictResponse:
      title: standardPolicyAlreadyExistErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: 'urn:dx:acl:conflict'
        title: Conflict
        detail: >-
          Policy already exist for some of the request objects
          [bf9d8f85-b7b0-40bb-8197-0046725f1ca8,
          2789fa93-565a-4ea8-97f9-b64fc4863021]

    generalBadRequest:
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: 'urn:dx:acl:badRequest'
        title: Bad Request
        detail: Bad Request
    AccessRequest:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: object
            properties:
              requestId:
                type: string
                format: uuid
                minLength: 1
              itemId:
                type: string
                minLength: 1
              itemType:
                type: string
                minLength: 1
              status:
                type: string
                minLength: 1
              expiryDuration:
                type: string
                minLength: 1
              constraints:
                type: object
              user:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                    required:
                      - firstName
                      - lastName
                required:
                  - id
                  - email
                  - name
              owner:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                    required:
                      - firstName
                      - lastName
                required:
                  - id
                  - email
                  - name
            required:
              - requestId
              - itemId
              - itemType
              - status
              - expiryDuration
      required:
        - type
        - title
        - results
      x-examples:
        Example:
          type: 'urn:dx:acl:success'
          title: User permission requests
          results:
            - requestId: e4619679-f5d9-4eff-9f79-bbded6130bb1
              itemId: string
              itemType: RESOURCE_GROUP
              status: pending
              expiryDuration: string
              constraints:
                access:
                  - api
                  - sub
                  - file
              user:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string
              owner:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string

    name:
      title: schemaName
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
      required:
        - firstName
        - lastName


    user:
      title: schemaUser
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
          maxLength: 36
      required:
        - id
        - name
        - email

    owner:
      title: schemaOwner
      type: object
      properties:
        id:
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
          maxLength: 36
    item:
      type: object
      properties:
        itemId:
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        itemType:
          enum:
            - RESOURCE
            - RESOURCE_GROUP
          minLength: 1
      required:
        - itemId
        - itemType

    requestBodyForVerify:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        owner:
          $ref: '#/components/schemas/owner'
        item:
          $ref: '#/components/schemas/item'
